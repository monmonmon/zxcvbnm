$(function() {    resize_css_3d_area();    showLoadingStatus();});$(window).load(function() {    init();});function init() {    build_texture();    if (checksupport()) {        $("#loading").fadeOut();        doRotate(0, 0, 0, 0, 0);        autoRotation();    } else {        $("#loading").text("CSS/3D is not supported.");    }    $(window).bind("resize", function() {        setTimeout(function() {            set_layout();        }, 500);    });    touchEventOn();}function resize_css_3d_area() {    var exclude_image_height;    var image_height;    var image_width;    var $page = $.mobile.activePage || $(document);    var $header = $("div[data-role='header']");    var $footer = $("div[data-role='footer']");    exclude_image_height = $header.outerHeight(true) + $footer.outerHeight(true);    image_height = $page.height() - exclude_image_height;    image_width = $page.width();    var image_properties = {        height: image_height + "px",        width: image_width + "px"    };    $(".body, #container, #cube, #controller, #loading").css(image_properties);    var $loading_icon = $("span.ui-icon-loading");    var $loading_progress = $("p.progress");    $loading_progress.css("margin-top", ((image_height - $loading_icon.height()) / 2) + "px");    var isEmbed = $("html.embed").size() > 0 ? true : false;    if (!isEmbed) {        setTimeout(scrollTo, 100, 0, 1);    } else {        if (image_width < 215) {            $(".zoombtn").each(function() {                $(this).css("display", "none");            });        } else {            $(".zoombtn").each(function() {                $(this).bind("touchstart", function() {                    $(this).addClass("zoomactive");                });                $(this).bind("touchmove", function(e) {                    e.preventDefault();                });                $(this).bind("touchend", function() {                    $(this).removeClass("zoomactive");                });            });        }    }}//function showLoadingStatus() {//    var loaded_image_counts = 0;//    var penta_image_counts = 7;//    $.mobile.loading("show");//    updateProgress = function() {//        loaded_image_counts += 1;//        var progress = Math.ceil(100 * loaded_image_counts / penta_image_counts);//        $("p.progress").html(progress + "%");//        if (loaded_image_counts == penta_image_counts) {//            $.mobile.loading("hide");//            $("p.progress").remove();//        }//    };//    $("#cube img").load(function() {//        updateProgress();//    });//    if ($("#cube .pentagonal_image").size() > 0) {//        loadOnCanvas("side0");//        loadOnCanvas("side1");//    }//    jQuery.event.add(window, "load", function() {//        $.mobile.loading("hide");//        $("p.progress").remove();//    });//}function showLoadingStatus() {    $("#cube .pentagonal_image").map(function() {        var target_id = $(this).attr('id');        var canvas    = $("#"            + target_id)[0];        var img       = $("#pentagonal_" + target_id)[0];        var onload_callback;        switch (target_id.replace('side', '')) {            case '0': case '1':                onload_callback = function() {                    var ctx = canvas.getContext("2d");                    var vertex = [];                    for (var i = 0; i < 5; i++) {                        var j = i * Math.PI * 2 / 5;                        var x = (Math.sin(j) + 1) * canvas.width / 2;                        var y = (1 - Math.cos(j)) * canvas.height / 2;                        vertex.push({                            x: x,                            y: y                        });                    }                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);                    ctx.globalCompositeOperation = "destination-out";                    ctx.beginPath();                    ctx.moveTo(vertex[0].x, vertex[0].y);                    ctx.lineTo(canvas.width, 0);                    ctx.lineTo(canvas.width, canvas.height);                    ctx.lineTo(0, canvas.height);                    ctx.lineTo(0, 0);                    ctx.lineTo(vertex[0].x - 1, vertex[0].y);                    ctx.lineTo(vertex[4].x - 1, vertex[4].y);                    ctx.lineTo(vertex[3].x - 1, vertex[3].y + 1);                    ctx.lineTo(vertex[2].x + 1, vertex[2].y + 1);                    ctx.lineTo(vertex[1].x + 1, vertex[1].y);                    ctx.lineTo(vertex[0].x, vertex[0].y);                    ctx.closePath();                    ctx.fill();                    $(img).remove();                };                break;            case '2': case '3': case '4': case '5': case '6':                onload_callback = function() {                    var ctx = canvas.getContext("2d");                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);                    $(img).remove();                };                break;        }        $(window).load(function() {            setTimeout(onload_callback, 10);        });    });    jQuery.event.add(window, "load", function() {        $.mobile.loading("hide");        $("p.progress").remove();    });}function loadOnCanvas(target_id) {    var canvas = $("#" + target_id)[0];    var img = $("#pentagonal_" + target_id)[0];    var onload_callback = function() {        var ctx = canvas.getContext("2d");        var vertex = [];        for (var i = 0; i < 5; i++) {            var j = i * Math.PI * 2 / 5;            var x = (Math.sin(j) + 1) * canvas.width / 2;            var y = (1 - Math.cos(j)) * canvas.height / 2;            vertex.push({                x: x,                y: y            });        }        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);        ctx.globalCompositeOperation = "destination-out";        ctx.beginPath();        ctx.moveTo(vertex[0].x, vertex[0].y);        ctx.lineTo(canvas.width, 0);        ctx.lineTo(canvas.width, canvas.height);        ctx.lineTo(0, canvas.height);        ctx.lineTo(0, 0);        ctx.lineTo(vertex[0].x - 1, vertex[0].y);        ctx.lineTo(vertex[4].x - 1, vertex[4].y);        ctx.lineTo(vertex[3].x - 1, vertex[3].y + 1);        ctx.lineTo(vertex[2].x + 1, vertex[2].y + 1);        ctx.lineTo(vertex[1].x + 1, vertex[1].y);        ctx.lineTo(vertex[0].x, vertex[0].y);        ctx.closePath();        ctx.fill();        $(img).remove();    };    $(window).load(function() {        setTimeout(onload_callback, 10);    });}function set_layout() {    resize_css_3d_area();    build_texture();}var hammerManager = null;var $hammerTarget = null;function hammerPinchStart() {    hammerManager.get("pinch").set({        enable: true    });    hammerManager.on("pinchmove pinchstart pinchend", pinch);}function hammerPinchStop() {    hammerManager.off("pinchmove pinchstart pinchend");    hammerManager.get("pinch").set({        enable: false    });}function multiTouchSwitch(e) {    switch (e.type) {        case "touchstart":            if (e.originalEvent.touches.length > 1) {                hammerPinchStart();            }            break;        case "touchend":            if (e.originalEvent.touches.length <= 1) {                hammerPinchStop();            }            break;    }}function pinchOn($target) {    if (hammerManager) {        return;    }    $hammerTarget = $target;    hammerManager = new Hammer($hammerTarget[0]);    $hammerTarget.on("touchstart touchend", multiTouchSwitch);}function pinchOff() {    if (!hammerManager) {        return;    }    $hammerTarget.off("touchstart touchend", multiTouchSwitch);    hammerManager = null;    $hammerTarget = null;}var downShiftKey;function touchEventOn() {	// added    downShiftKey = false;    $(window).keydown(function(e) {        downShiftKey = e.shiftKey;    });    $(window).keyup(function(e) {        downShiftKey = false;    });	// added    var isEmbed = $("html.embed").size() > 0 ? true : false;    $controller = $("#controller");    if (!isEmbed) {        $controller.on("mousewheel", moveWheel);    }    $controller.on("vmousedown", startDrag);    //$controller.on("vmousemove", moveDrag);    $controller.on("vmousemove", hoehoe);    $controller.on("vmouseup", endDrag);    $controller.on("vmouseout", endDrag);    var $document = $(document);    if (!isEmbed) {        $document.on("mousewheel", moveWheel);    }    $document.on("vmousedown", startDrag);    //$document.on("vmousemove", moveDrag);    $document.on("vmousemove", hoehoe);    $document.on("vmouseup", endDrag);    $document.on("vmouseout", endDrag);    if (!isEmbed) {        pinchOn($("body"));    }    var $zoomin = $(".zoombtn#zoomin");    var $zoomout = $(".zoombtn#zoomout");    $zoomin.on("vmousedown", zoomIn);    $zoomin.on("vmouseup", zoomStop);    $zoomout.on("vmousedown", zoomOut);    $zoomout.on("vmouseup", zoomStop);}function touchEventOff() {    var isEmbed = $("html.embed").size() > 0 ? true : false;    $controller = $("#controller");    if (!isEmbed) {        $controller.off("mousewheel", moveWheel);    }    $controller.off("vmousedown", startDrag);    //$controller.off("vmousemove", moveDrag);    $controller.off("vmousemove", hoehoe);    $controller.off("vmouseup", endDrag);    $controller.off("vmouseout", endDrag);    var $document = $(document);    if (!isEmbed) {        $document.off("mousewheel", moveWheel);    }    $document.off("vmousedown", startDrag);    //$document.off("vmousemove", moveDrag);    $document.off("vmousemove", hoehoe);    $document.off("vmouseup", endDrag);    $document.off("vmouseout", endDrag);    if (!isEmbed) {        pinchOff();    }    var $zoomin = $(".zoombtn#zoomin");    var $zoomout = $(".zoombtn#zoomout");    $zoomin.off("vmousedown", zoomIn);    $zoomin.off("vmouseup", zoomStop);    $zoomout.off("vmousedown", zoomOut);    $zoomout.off("vmouseup", zoomStop);}function hoehoe (e) {    if (active && downShiftKey) {        var def = $(this).css('display');        $(this).css({display: 'none'});        var canvas = document.elementFromPoint(e.pageX, e.pageY);        $(this).css({display: def});        var ctx = canvas.getContext("2d");        // お絵かきしたまえ        // 画像の座標はe.pageX, e.pageYから取得すればOK    } else {        moveDrag(e);    }}